/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MatchDetail,
  Player,
  Team,
  UpdateTeam,
} from '../models/index';
import {
    MatchDetailFromJSON,
    MatchDetailToJSON,
    PlayerFromJSON,
    PlayerToJSON,
    TeamFromJSON,
    TeamToJSON,
    UpdateTeamFromJSON,
    UpdateTeamToJSON,
} from '../models/index';

export interface AddPlayerToTeamRequest {
    teamId: number;
    playerId: number;
}

export interface CreateTeamRequest {
    updateTeam: UpdateTeam;
}

export interface DeleteTeamRequest {
    teamId: number;
}

export interface GetTeamByIdRequest {
    teamId: number;
}

export interface GetTeamMatchesRequest {
    teamId: number;
}

export interface GetTeamPlayersRequest {
    teamId: number;
}

export interface RemovePlayerFromTeamRequest {
    teamId: number;
    playerId: number;
}

export interface UpdateTeamRequest {
    teamId: number;
    updateTeam: UpdateTeam;
}

/**
 * 
 */
export class TeamControllerApi extends runtime.BaseAPI {

    /**
     */
    async addPlayerToTeamRaw(requestParameters: AddPlayerToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling addPlayerToTeam().'
            );
        }

        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling addPlayerToTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}/players/{playerId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async addPlayerToTeam(requestParameters: AddPlayerToTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.addPlayerToTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createTeamRaw(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters['updateTeam'] == null) {
            throw new runtime.RequiredError(
                'updateTeam',
                'Required parameter "updateTeam" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamToJSON(requestParameters['updateTeam']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async createTeam(requestParameters: CreateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTeamRaw(requestParameters: DeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling deleteTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async deleteTeam(requestParameters: DeleteTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.deleteTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Team>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TeamFromJSON));
    }

    /**
     */
    async getAllTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Team>> {
        const response = await this.getAllTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamByIdRaw(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async getTeamById(requestParameters: GetTeamByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamMatchesRaw(requestParameters: GetTeamMatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MatchDetail>>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamMatches().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}/matches`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatchDetailFromJSON));
    }

    /**
     */
    async getTeamMatches(requestParameters: GetTeamMatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MatchDetail>> {
        const response = await this.getTeamMatchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeamPlayersRaw(requestParameters: GetTeamPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Player>>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamPlayers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}/players`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerFromJSON));
    }

    /**
     */
    async getTeamPlayers(requestParameters: GetTeamPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Player>> {
        const response = await this.getTeamPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removePlayerFromTeamRaw(requestParameters: RemovePlayerFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling removePlayerFromTeam().'
            );
        }

        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling removePlayerFromTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teams/{teamId}/players/{playerId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))).replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async removePlayerFromTeam(requestParameters: RemovePlayerFromTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.removePlayerFromTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTeamRaw(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling updateTeam().'
            );
        }

        if (requestParameters['updateTeam'] == null) {
            throw new runtime.RequiredError(
                'updateTeam',
                'Required parameter "updateTeam" was null or undefined when calling updateTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teams/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamToJSON(requestParameters['updateTeam']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     */
    async updateTeam(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.updateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
