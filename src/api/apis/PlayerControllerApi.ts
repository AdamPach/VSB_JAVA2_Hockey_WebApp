/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Player,
  UpdatePlayer,
} from '../models/index';
import {
    PlayerFromJSON,
    PlayerToJSON,
    UpdatePlayerFromJSON,
    UpdatePlayerToJSON,
} from '../models/index';

export interface CreatePlayerRequest {
    updatePlayer: UpdatePlayer;
}

export interface DeletePlayerRequest {
    playerId: number;
}

export interface GetPlayerRequest {
    playerId: number;
}

export interface UpdatePlayerRequest {
    playerId: number;
    updatePlayer: UpdatePlayer;
}

/**
 * 
 */
export class PlayerControllerApi extends runtime.BaseAPI {

    /**
     */
    async createPlayerRaw(requestParameters: CreatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['updatePlayer'] == null) {
            throw new runtime.RequiredError(
                'updatePlayer',
                'Required parameter "updatePlayer" was null or undefined when calling createPlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/players`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlayerToJSON(requestParameters['updatePlayer']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async createPlayer(requestParameters: CreatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.createPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePlayerRaw(requestParameters: DeletePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling deletePlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/{playerId}`.replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async deletePlayer(requestParameters: DeletePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.deletePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlayerRaw(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling getPlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players/{playerId}`.replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async getPlayer(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.getPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPlayersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Player>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerFromJSON));
    }

    /**
     */
    async getPlayers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Player>> {
        const response = await this.getPlayersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePlayerRaw(requestParameters: UpdatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling updatePlayer().'
            );
        }

        if (requestParameters['updatePlayer'] == null) {
            throw new runtime.RequiredError(
                'updatePlayer',
                'Required parameter "updatePlayer" was null or undefined when calling updatePlayer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/players/{playerId}`.replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlayerToJSON(requestParameters['updatePlayer']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     */
    async updatePlayer(requestParameters: UpdatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.updatePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
